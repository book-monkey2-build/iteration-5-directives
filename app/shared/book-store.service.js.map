{"version":3,"file":"book-store.service.js","sourceRoot":"","sources":["../../home/travis/build/Angular2Buch/TMP/BookMonkey/tmp/broccoli_type_script_compiler-input_base_path-b2Xn4SmD.tmp/0/src/app/shared/book-store.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAA2B,eAAe,CAAC,CAAA;AAC3C,qBAA8B,eAAe,CAAC,CAAA;AAG9C,QAAO,uBAAuB,CAAC,CAAA;AAG/B;IAIE,0BAAoB,IAAU;QAAV,SAAI,GAAJ,IAAI,CAAM;QAHtB,QAAG,GAAW,QAAQ,CAAC,QAAQ,KAAK,WAAW,GAAG,uBAAuB,GAAG,yCAAyC,CAAC;QACtH,YAAO,GAAY,IAAI,cAAO,EAAE,CAAC;QAGvC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC;IAC1D,CAAC;IAED,iCAAM,GAAN;QACE,MAAM,CAAC,IAAI,CAAC,IAAI;aACb,GAAG,CAAI,IAAI,CAAC,GAAG,WAAQ,CAAC;aACxB,GAAG,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,IAAI,EAAE,EAAf,CAAe,CAAC,CAAC;IACtC,CAAC;IAED,oCAAS,GAAT,UAAU,IAAY;QACpB,MAAM,CAAC,IAAI,CAAC,IAAI;aACb,GAAG,CAAI,IAAI,CAAC,GAAG,cAAS,IAAM,CAAC;aAC/B,GAAG,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,IAAI,EAAE,EAAf,CAAe,CAAC,CAAC;IACtC,CAAC;IAED,iCAAM,GAAN,UAAO,IAAU;QACf,MAAM,CAAC,IAAI,CAAC,IAAI;aACb,IAAI,CAAI,IAAI,CAAC,GAAG,UAAO,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,CAAA;IAC9E,CAAC;IAED,iCAAM,GAAN,UAAO,IAAU;QACf,MAAM,CAAC,IAAI,CAAC,IAAI;aACb,GAAG,CAAI,IAAI,CAAC,GAAG,cAAS,IAAI,CAAC,IAAM,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,CAAA;IAC1F,CAAC;IAED,iCAAM,GAAN,UAAO,IAAY;QACjB,MAAM,CAAC,IAAI,CAAC,IAAI;aACb,MAAM,CAAI,IAAI,CAAC,GAAG,cAAS,IAAM,CAAC,CAAC;IACxC,CAAC;IAlCH;QAAC,iBAAU,EAAE;;wBAAA;IAmCb,uBAAC;AAAD,CAAC,AAlCD,IAkCC;AAlCY,wBAAgB,mBAkC5B,CAAA","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Http, Headers } from '@angular/http';\nimport { Book } from './book';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/operator/map';\n\n@Injectable()\nexport class BookStoreService {\n  private api: string = location.hostname === 'localhost' ? 'http://localhost:3000' : 'http://book-monkey2-api.angular2buch.de';\n  private headers: Headers = new Headers();\n\n  constructor(private http: Http) {\n    this.headers.append('Content-Type', 'application/json');\n  }\n\n  getAll(): Observable<Book[]> {\n    return this.http\n      .get(`${this.api}/books`)\n      .map(response => response.json());\n  }\n\n  getSingle(isbn: string): Observable<Book>  {\n    return this.http\n      .get(`${this.api}/book/${isbn}`)\n      .map(response => response.json());\n  }\n\n  create(book: Book): Observable<any>  {\n    return this.http\n      .post(`${this.api}/book`, JSON.stringify(book), { headers: this.headers })\n  }\n\n  update(book: Book): Observable<any>  {\n    return this.http\n      .put(`${this.api}/book/${book.isbn}`, JSON.stringify(book), { headers: this.headers })\n  }\n\n  delete(isbn: string): Observable<any> {\n    return this.http\n      .delete(`${this.api}/book/${isbn}`);\n  }\n}\n"]}